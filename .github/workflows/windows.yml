name: build-windows

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
jobs:
  build-cpp:
    runs-on: windows-latest
    env:
      OPENBLAS_VERSION: 0.3.23
      VULKAN_VERSION: 1.3.261.1
    strategy:
      matrix:
        preset:
          [
            x64-windows-vulkan-release,
            x64-windows-msvc+static-release,
          ]
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install Vulkan SDK
        id: get_vulkan
        if: ${{ matrix.preset == 'x64-windows-vulkan-release' }}
        run: |
          curl.exe -o $env:RUNNER_TEMP/VulkanSDK-Installer.exe -L "https://sdk.lunarg.com/sdk/download/${env:VULKAN_VERSION}/windows/VulkanSDK-${env:VULKAN_VERSION}-Installer.exe"
          & "$env:RUNNER_TEMP\VulkanSDK-Installer.exe" --accept-licenses --default-answer --confirm-command install
          Add-Content $env:GITHUB_ENV "VULKAN_SDK=C:\VulkanSDK\${env:VULKAN_VERSION}"
          Add-Content $env:GITHUB_PATH "C:\VulkanSDK\${env:VULKAN_VERSION}\bin"

      - name: Install Ninja
        id: install_ninja
        run: |
          choco install ninja
          
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Build
        id: cmake_build
        run: |
          cmake -S cpp -B build-${{ matrix.preset }} -DCMAKE_BUILD_TYPE=Release --preset ${{ matrix.preset }} -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl
          cmake --build build-${{ matrix.preset }} --config Release -j ${env:NUMBER_OF_PROCESSORS}

      - name: Determine tag name
        id: tag
        shell: bash
        run: |
          BUILD_NUMBER="$(git rev-list --count HEAD)"
          SHORT_HASH="$(git rev-parse --short=7 HEAD)"
          if [[ "${{ env.BRANCH_NAME }}" == "master" ]]; then
            echo "name=b${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          else
            SAFE_NAME=$(echo "${{ env.BRANCH_NAME }}" | tr '/' '-')
            echo "name=${SAFE_NAME}-b${BUILD_NUMBER}-${SHORT_HASH}" >> $GITHUB_OUTPUT
          fi

      - name: Pack artifacts
        id: pack_artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        run: |
          7z a got-${{ steps.tag.outputs.name }}-${{ matrix.preset }}.zip .\build-${{ matrix.preset }}\bin .\build-${{ matrix.preset }}\lib

      - name: Upload artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          path: got-${{ steps.tag.outputs.name }}-${{ matrix.preset }}.zip
          name: got-${{ matrix.preset }}.zip

      - name: Download artifacts
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          path: ./artifact

      - name: Inspect artifact
        run: |
          ls ./artifact

  build-rs:
    needs:
      - build-cpp
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
#          - os: windows-latest
#            target: aarch64-pc-windows-msvc
#          - os: macos-latest
#            target: aarch64-apple-darwin
#          - os: macos-latest
#            target: x86_64-apple-darwin
#          - os: ubuntu-22.04
#            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    env:
      OPENBLAS_VERSION: 0.3.23
      VULKAN_VERSION: 1.3.261.1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true

      - name: Install 7-Zip
        shell: powershell
        run: |
          choco install 7zip -y

      - name: Download onnxruntime artifact
        shell: powershell
        run: |
          $artifactUrl = "https://github.com/MosRat/OnnxruntimeBuilder/releases/download/1.20.1-dml/onnxruntime-v1.20.1-windows-vs2022-x64-static-mt.7z"
          $outputPath = "$env:RUNNER_TEMP\onnxruntime-v1.20.1-windows-vs2022-x64-static-mt.7z"
          Invoke-WebRequest -Uri $artifactUrl -OutFile $outputPath

      - name: Extract onnxruntime.7z
        shell: powershell
        run: |
          $sevenZipPath = "$env:RUNNER_TEMP\onnxruntime-v1.20.1-windows-vs2022-x64-static-mt.7z"
          $finalExtractPath = "$env:RUNNER_TEMP\lib"
          7z x $sevenZipPath -o"lib"

      - name: Set ORT_LIB_LOCATION environment variable
        shell: powershell
        run: |
          $libPath = Resolve-Path -Path ".\lib\onnxruntime-v1.20.1-windows-vs2022-x64-static-mt\lib" | Select-Object -ExpandProperty Path
          echo "ORT_LIB_LOCATION=$libPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Download got-x64-windows-vulkan-release.zip artifact
        uses: actions/download-artifact@v4
        with:
          name: got-x64-windows-vulkan-release.zip
          path: ${{ runner.temp }}/artifact

      - name: Find and extract the random-named zip file
        shell: powershell
        run: |
          $randomZipFile = Get-ChildItem -Path "$env:RUNNER_TEMP\artifact" -Filter *.zip | Select-Object -First 1

          if (-not $randomZipFile) {
              throw "No zip file found in the artifact!"
          }

          $extractPath = "$env:RUNNER_TEMP\extracted"
          Expand-Archive -Path $randomZipFile.FullName -DestinationPath $extractPath

          $targetDir = "cpp/build-x64-windows-vulkan-release"
          if (-not (Test-Path -Path $targetDir)) {
              New-Item -ItemType Directory -Path $targetDir | Out-Null
          }

          $libPath = Join-Path -Path $extractPath -ChildPath "lib"
          if (Test-Path -Path $libPath) {
              Move-Item -Path $libPath -Destination $targetDir -Force
          } else {
              throw "lib folder not found in the extracted zip file!"
          }
          Get-ChildItem -Path "cpp/build-x64-windows-vulkan-release" -Recurse | Format-Table Name, FullName, Length
          Get-ChildItem -Path "lib" -Recurse | Format-Table Name, FullName, Length
          Get-ChildItem -Path "$env:ORT_LIB_LOCATION" -Recurse | Format-Table Name, FullName, Length

      - name: Install Vulkan SDK
        id: get_vulkan
        if: ${{ matrix.target == 'x86_64-pc-windows-msvc' }}
        run: |
          curl.exe -o $env:RUNNER_TEMP/VulkanSDK-Installer.exe -L "https://sdk.lunarg.com/sdk/download/${env:VULKAN_VERSION}/windows/VulkanSDK-${env:VULKAN_VERSION}-Installer.exe"
          & "$env:RUNNER_TEMP\VulkanSDK-Installer.exe" --accept-licenses --default-answer --confirm-command install
          Add-Content $env:GITHUB_ENV "VULKAN_SDK=C:\VulkanSDK\${env:VULKAN_VERSION}"
          Add-Content $env:GITHUB_PATH "C:\VulkanSDK\${env:VULKAN_VERSION}\bin"

      - name: Build with Cargo
        run: cargo build --release

      - name: Package got.exe
        shell: powershell
        run: |
          $packageDir = "$env:RUNNER_TEMP\package"
          New-Item -ItemType Directory -Path $packageDir | Out-Null

          $exePath = "target/release/got.exe"
          if (Test-Path -Path $exePath) {
              Copy-Item -Path $exePath -Destination $packageDir
          } else {
              throw "got.exe not found in target/release!"
          }

          $zipPath = "$env:RUNNER_TEMP\got-x64-windows-vulkan-release.zip"
          Compress-Archive -Path "$packageDir\*" -DestinationPath $zipPath

      - name: Upload got.exe as artifact
        uses: actions/upload-artifact@v4
        with:
          name: got-x64-windows-vulkan-release
          path: ${{ runner.temp }}/got-x64-windows-vulkan-release.zip
